/*
Package staticlint предоставляет комплексный статический анализатор кода Go,
объединяющий множество анализаторов для обеспечения высокого качества кода.

# Запуск multichecker

Для запуска анализатора выполните команду:

	go run ./cmd/staticlint [flags] [packages]

Примеры использования:

	# Анализ текущего пакета
	go run ./cmd/staticlint .

	# Анализ конкретного пакета
	go run ./cmd/staticlint ./internal/app

	# Анализ всего проекта
	go run ./cmd/staticlint ./...

	# Включение конкретных анализаторов
	go run ./cmd/staticlint -osexit ./...

# Включенные анализаторы

## Собственные анализаторы

osexit - Запрещает прямое использование os.Exit в функции main пакета main.
Этот анализатор помогает поддерживать правильную архитектуру приложения, где
обработка ошибок должна происходить через логгер или другие механизмы, а не
через принудительное завершение программы.

## Стандартные анализаторы (golang.org/x/tools/go/analysis/passes)

asmdecl - Проверяет правильность объявлений assembly функций.

assign - Обнаруживает бесполезные присваивания.

atomic - Проверяет типичные ошибки при использовании sync/atomic пакета.

atomicalign - Проверяет выравнивание структур с atomic полями.

bools - Обнаруживает типичные ошибки в булевых выражениях.

buildtag - Проверяет корректность build тегов.

cgocall - Обнаруживает нарушения правил cgo передачи указателей.

composite - Проверяет составные литералы без ключей.

copylock - Проверяет передачу блокировок по значению.

deepequalerrors - Проверяет использование reflect.DeepEqual с error значениями.

errorsas - Проверяет правильное использование errors.As.

fieldalignment - Обнаруживает структуры, которые можно упаковать более эффективно.

httpresponse - Проверяет ошибки при использовании HTTP response.

ifaceassert - Обнаруживает невозможные type assertions интерфейсов.

loopclosure - Проверяет ссылки на переменные цикла из вложенных функций.

lostcancel - Проверяет неиспользованные cancel функции context.

nilfunc - Проверяет бесполезные сравнения функций с nil.

nilness - Проверяет redundant или невозможные nil сравнения.

printf - Проверяет согласованность строк формата printf и аргументов.

shadow - Проверяет затеняющие переменные.

shift - Проверяет сдвиги, которые равны или превышают ширину целого числа.

sortslice - Проверяет вызовы sort.Slice с некорректными сравнениями.

stdmethods - Проверяет сигнатуры стандартных методов.

stringintconv - Проверяет преобразования строк в int.

structtag - Проверяет правильность тегов структур.

tests - Проверяет типичные ошибки в использовании testing пакета.

timeformat - Проверяет использование time.Time.Format или time.Parse с некорректными макетами.

unmarshal - Проверяет передачу не-указателей в unmarshal функции.

unreachable - Проверяет недостижимый код.

unsafeptr - Проверяет недопустимые преобразования uintptr в unsafe.Pointer.

unusedresult - Проверяет неиспользованные результаты вызовов функций.

## Анализаторы staticcheck.io

### Класс SA (Static Analysis)

Включает все анализаторы класса SA из пакета staticcheck.io, которые выполняют
статический анализ кода и находят баги, потенциальные проблемы и код, который
может работать не так, как ожидается.

### Класс ST (Style Check)

Включает анализаторы стиля кода из пакета stylecheck, которые проверяют
соответствие кода общепринятым стилистическим соглашениям Go.

### Класс S (Simple)

Включает анализаторы из пакета simple, которые предлагают упрощения кода
без изменения функциональности.

## Публичные анализаторы

go-critic - Мощный анализатор с большим набором проверок для улучшения
качества кода, производительности и стиля.

errcheck - Проверяет, что все возвращаемые ошибки обрабатываются должным образом.

# Примеры проблем

Собственный анализатор osexit найдет и сообщит об ошибке в следующем коде:

	package main

	import "os"

	func main() {
		// Плохо: прямой вызов os.Exit
		os.Exit(1)
	}

Вместо этого следует использовать:

	package main

	import (
		"log"
		"os"
	)

	func main() {
		if err := run(); err != nil {
			log.Fatal(err)
		}
	}

	func run() error {
		// Основная логика приложения
		return nil
	}

# Конфигурация

Multichecker поддерживает стандартные флаги анализаторов:

	-h, --help     показать справку
	-json          вывод в формате JSON
	-c int         количество проверок для параллельного выполнения

Конкретные анализаторы можно включать или отключать через соответствующие флаги.
*/
package main
